//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    assetsAllGET(): Promise<AssetResponseDto[]> {
        let url_ = this.baseUrl + "/api/assets";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsAllGET(_response);
        });
    }

    protected processAssetsAllGET(response: Response): Promise<AssetResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assetsPOST(body: CreateAssetCommand | undefined): Promise<AssetResponseDto> {
        let url_ = this.baseUrl + "/api/assets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsPOST(_response);
        });
    }

    protected processAssetsPOST(response: Response): Promise<AssetResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assetsAllPUT(body: UpdateAssetsByIdCommand | undefined): Promise<AssetResponseDto[]> {
        let url_ = this.baseUrl + "/api/assets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsAllPUT(_response);
        });
    }

    protected processAssetsAllPUT(response: Response): Promise<AssetResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto[]>(null as any);
    }

    /**
     * @return Success
     */
    assetsGET(id: number): Promise<AssetResponseDto> {
        let url_ = this.baseUrl + "/api/assets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsGET(_response);
        });
    }

    protected processAssetsGET(response: Response): Promise<AssetResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    assetsPUT(id: number, body: UpdateAssetDto | undefined): Promise<AssetResponseDto> {
        let url_ = this.baseUrl + "/api/assets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsPUT(_response);
        });
    }

    protected processAssetsPUT(response: Response): Promise<AssetResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    assetsDELETE(id: number): Promise<AssetResponseDto> {
        let url_ = this.baseUrl + "/api/assets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsDELETE(_response);
        });
    }

    protected processAssetsDELETE(response: Response): Promise<AssetResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    loansGET(id: number): Promise<LoanResponseDto> {
        let url_ = this.baseUrl + "/api/assets/{id}/loans";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansGET(_response);
        });
    }

    protected processLoansGET(response: Response): Promise<LoanResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    categoriesAll(): Promise<CategoryResponseDto[]> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoriesAll(_response);
        });
    }

    protected processCategoriesAll(response: Response): Promise<CategoryResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponseDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    categoriesPOST(body: CreateCategoryCommand | undefined): Promise<CategoryResponseDto> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoriesPOST(_response);
        });
    }

    protected processCategoriesPOST(response: Response): Promise<CategoryResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    categoriesGET(id: number): Promise<CategoryResponseDto> {
        let url_ = this.baseUrl + "/api/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoriesGET(_response);
        });
    }

    protected processCategoriesGET(response: Response): Promise<CategoryResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    categoriesDELETE(id: number): Promise<CategoryResponseDto> {
        let url_ = this.baseUrl + "/api/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoriesDELETE(_response);
        });
    }

    protected processCategoriesDELETE(response: Response): Promise<CategoryResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    categoriesPUT(id: number, body: UpdateCategoryDto | undefined): Promise<CategoryResponseDto> {
        let url_ = this.baseUrl + "/api/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoriesPUT(_response);
        });
    }

    protected processCategoriesPUT(response: Response): Promise<CategoryResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    assetsAllGET2(id: number): Promise<AssetResponseDto[]> {
        let url_ = this.baseUrl + "/api/categories/{id}/assets";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssetsAllGET2(_response);
        });
    }

    protected processAssetsAllGET2(response: Response): Promise<AssetResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetResponseDto[]>(null as any);
    }

    /**
     * @return Success
     */
    loansAll(number: number): Promise<LoanResponseDto[]> {
        let url_ = this.baseUrl + "/api/employees/{number}/loans";
        if (number === undefined || number === null)
            throw new Error("The parameter 'number' must be defined.");
        url_ = url_.replace("{number}", encodeURIComponent("" + number));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansAll(_response);
        });
    }

    protected processLoansAll(response: Response): Promise<LoanResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LoanResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto[]>(null as any);
    }

    /**
     * @return Success
     */
    loanhistory(): Promise<LoanHistoryResponseDto[]> {
        let url_ = this.baseUrl + "/api/loanhistory";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoanhistory(_response);
        });
    }

    protected processLoanhistory(response: Response): Promise<LoanHistoryResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LoanHistoryResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanHistoryResponseDto[]>(null as any);
    }

    /**
     * @return Success
     */
    loansAll2(): Promise<LoanResponseDto[]> {
        let url_ = this.baseUrl + "/api/loans";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansAll2(_response);
        });
    }

    protected processLoansAll2(response: Response): Promise<LoanResponseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LoanResponseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    loansPOST(body: CreateLoanCommand | undefined): Promise<LoanResponseDto> {
        let url_ = this.baseUrl + "/api/loans";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansPOST(_response);
        });
    }

    protected processLoansPOST(response: Response): Promise<LoanResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    loansGET2(id: number): Promise<LoanResponseDto> {
        let url_ = this.baseUrl + "/api/loans/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansGET2(_response);
        });
    }

    protected processLoansGET2(response: Response): Promise<LoanResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    loansPUT(id: number, body: UpdateLoanDto | undefined): Promise<LoanResponseDto> {
        let url_ = this.baseUrl + "/api/loans/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansPUT(_response);
        });
    }

    protected processLoansPUT(response: Response): Promise<LoanResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto>(null as any);
    }

    /**
     * @return Success
     */
    loansDELETE(id: number): Promise<LoanResponseDto> {
        let url_ = this.baseUrl + "/api/loans/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoansDELETE(_response);
        });
    }

    protected processLoansDELETE(response: Response): Promise<LoanResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoanResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoanResponseDto>(null as any);
    }
}

export class AssetResponseDto implements IAssetResponseDto {
    id?: number;
    serialNumberValue?: number;
    categoryName?: string | undefined;
    status?: Status;

    constructor(data?: IAssetResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.serialNumberValue = _data["serialNumberValue"];
            this.categoryName = _data["categoryName"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): AssetResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serialNumberValue"] = this.serialNumberValue;
        data["categoryName"] = this.categoryName;
        data["status"] = this.status;
        return data;
    }
}

export interface IAssetResponseDto {
    id?: number;
    serialNumberValue?: number;
    categoryName?: string | undefined;
    status?: Status;
}

export class CategoryResponseDto implements ICategoryResponseDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: ICategoryResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategoryResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICategoryResponseDto {
    id?: number;
    name?: string | undefined;
}

export class CreateAssetCommand implements ICreateAssetCommand {
    serialNumberValue?: number;
    categoryId?: number;

    constructor(data?: ICreateAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serialNumberValue = _data["serialNumberValue"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CreateAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serialNumberValue"] = this.serialNumberValue;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface ICreateAssetCommand {
    serialNumberValue?: number;
    categoryId?: number;
}

export class CreateCategoryCommand implements ICreateCategoryCommand {
    name?: string | undefined;

    constructor(data?: ICreateCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateCategoryCommand {
    name?: string | undefined;
}

export class CreateLoanCommand implements ICreateLoanCommand {
    intervalStart?: Date;
    intervalStop?: Date;
    intervalIsLongterm?: boolean;
    assignedToValue?: number;
    assetId?: number;
    bsdReference?: string | undefined;

    constructor(data?: ICreateLoanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.intervalStart = _data["intervalStart"] ? new Date(_data["intervalStart"].toString()) : <any>undefined;
            this.intervalStop = _data["intervalStop"] ? new Date(_data["intervalStop"].toString()) : <any>undefined;
            this.intervalIsLongterm = _data["intervalIsLongterm"];
            this.assignedToValue = _data["assignedToValue"];
            this.assetId = _data["assetId"];
            this.bsdReference = _data["bsdReference"];
        }
    }

    static fromJS(data: any): CreateLoanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLoanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["intervalStart"] = this.intervalStart ? this.intervalStart.toISOString() : <any>undefined;
        data["intervalStop"] = this.intervalStop ? this.intervalStop.toISOString() : <any>undefined;
        data["intervalIsLongterm"] = this.intervalIsLongterm;
        data["assignedToValue"] = this.assignedToValue;
        data["assetId"] = this.assetId;
        data["bsdReference"] = this.bsdReference;
        return data;
    }
}

export interface ICreateLoanCommand {
    intervalStart?: Date;
    intervalStop?: Date;
    intervalIsLongterm?: boolean;
    assignedToValue?: number;
    assetId?: number;
    bsdReference?: string | undefined;
}

export class LoanHistoryResponseDto implements ILoanHistoryResponseDto {
    id?: number;
    intervalStart?: Date;
    intervalStop?: Date;
    returnDate?: Date;
    borrowerEmployeeNumberValue?: number;
    assetId?: number;

    constructor(data?: ILoanHistoryResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.intervalStart = _data["intervalStart"] ? new Date(_data["intervalStart"].toString()) : <any>undefined;
            this.intervalStop = _data["intervalStop"] ? new Date(_data["intervalStop"].toString()) : <any>undefined;
            this.returnDate = _data["returnDate"] ? new Date(_data["returnDate"].toString()) : <any>undefined;
            this.borrowerEmployeeNumberValue = _data["borrowerEmployeeNumberValue"];
            this.assetId = _data["assetId"];
        }
    }

    static fromJS(data: any): LoanHistoryResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoanHistoryResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["intervalStart"] = this.intervalStart ? this.intervalStart.toISOString() : <any>undefined;
        data["intervalStop"] = this.intervalStop ? this.intervalStop.toISOString() : <any>undefined;
        data["returnDate"] = this.returnDate ? this.returnDate.toISOString() : <any>undefined;
        data["borrowerEmployeeNumberValue"] = this.borrowerEmployeeNumberValue;
        data["assetId"] = this.assetId;
        return data;
    }
}

export interface ILoanHistoryResponseDto {
    id?: number;
    intervalStart?: Date;
    intervalStop?: Date;
    returnDate?: Date;
    borrowerEmployeeNumberValue?: number;
    assetId?: number;
}

export class LoanResponseDto implements ILoanResponseDto {
    id?: number;
    intervalStart?: Date;
    intervalStop?: Date;
    intervalIsLongterm?: boolean;
    assignedToValue?: number;
    assetId?: number;
    assetStatus?: Status;
    assetCategoryName?: string | undefined;
    bsdReference?: string | undefined;

    constructor(data?: ILoanResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.intervalStart = _data["intervalStart"] ? new Date(_data["intervalStart"].toString()) : <any>undefined;
            this.intervalStop = _data["intervalStop"] ? new Date(_data["intervalStop"].toString()) : <any>undefined;
            this.intervalIsLongterm = _data["intervalIsLongterm"];
            this.assignedToValue = _data["assignedToValue"];
            this.assetId = _data["assetId"];
            this.assetStatus = _data["assetStatus"];
            this.assetCategoryName = _data["assetCategoryName"];
            this.bsdReference = _data["bsdReference"];
        }
    }

    static fromJS(data: any): LoanResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoanResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["intervalStart"] = this.intervalStart ? this.intervalStart.toISOString() : <any>undefined;
        data["intervalStop"] = this.intervalStop ? this.intervalStop.toISOString() : <any>undefined;
        data["intervalIsLongterm"] = this.intervalIsLongterm;
        data["assignedToValue"] = this.assignedToValue;
        data["assetId"] = this.assetId;
        data["assetStatus"] = this.assetStatus;
        data["assetCategoryName"] = this.assetCategoryName;
        data["bsdReference"] = this.bsdReference;
        return data;
    }
}

export interface ILoanResponseDto {
    id?: number;
    intervalStart?: Date;
    intervalStop?: Date;
    intervalIsLongterm?: boolean;
    assignedToValue?: number;
    assetId?: number;
    assetStatus?: Status;
    assetCategoryName?: string | undefined;
    bsdReference?: string | undefined;
}

export enum Status {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class UpdateAssetDto implements IUpdateAssetDto {
    status?: Status;
    categoryId?: number;

    constructor(data?: IUpdateAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): UpdateAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IUpdateAssetDto {
    status?: Status;
    categoryId?: number;
}

export class UpdateAssetsByIdCommand implements IUpdateAssetsByIdCommand {
    ids?: number[] | undefined;
    status?: Status;

    constructor(data?: IUpdateAssetsByIdCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdateAssetsByIdCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetsByIdCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdateAssetsByIdCommand {
    ids?: number[] | undefined;
    status?: Status;
}

export class UpdateCategoryDto implements IUpdateCategoryDto {
    name?: string | undefined;

    constructor(data?: IUpdateCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateCategoryDto {
    name?: string | undefined;
}

export class UpdateLoanDto implements IUpdateLoanDto {
    intervalStop?: Date;

    constructor(data?: IUpdateLoanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.intervalStop = _data["intervalStop"] ? new Date(_data["intervalStop"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateLoanDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLoanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["intervalStop"] = this.intervalStop ? this.intervalStop.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateLoanDto {
    intervalStop?: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}